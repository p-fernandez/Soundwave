var Soundwave=function(){"use strict";const i={CLOSED:"closed",RUNNING:"running",SUSPENDED:"suspended"},t=window.AudioContext||window.webkitAudioContext,o=(i={})=>(i.context||{}).state||null,e=t=>t===i.RUNNING,s=t=>t===i.SUSPENDED;return new class{constructor(){this.audioContext=null,this.close=this.close.bind(this),this.initAudioSource=this.initAudioSource.bind(this),this.load=this.load.bind(this),this.pause=this.pause.bind(this),this.play=this.play.bind(this),this.stop=this.stop.bind(this)}close(){this.audioContext.close()}initAudioSource(){if(this.audioContext){this.audioSource=this.audioContext.createBufferSource(),this.audioSource.connect(this.audioContext.destination),this.audioSource.buffer=this.buffer,this.audioSource.start(0);const i=o(this.audioSource);s(i)&&this.audioContext.resume()}}load(i){this.audioContext=new t;const o=new FileReader;o.onload=(()=>{this.file=o.result}),o.readAsArrayBuffer(i),o.onloadend=(()=>{this.audioContext.decodeAudioData(this.file,i=>{this.buffer=i},i=>{console.log(`Error decoding audio: ${i}`)})}),o.onerror=(()=>{console.log(o.error)})}pause(){const i=o(this.audioSource);e(i)?this.audioContext.suspend():s(i)&&this.audioContext.resume()}play(){this.audioSource&&this.audioSource.disconnect(),this.initAudioSource()}stop(){o(this.audioSource)&&(this.audioSource.stop(),this.audioSource.currentTime=0)}}}();
